module JSS
  
  #####################################
  ### Module Variables
  #####################################

  #####################################
  ### Module Methods
  #####################################
  
  #####################################
  ### Classes
  #####################################

  ###
  ### A Parent class for Advanced Computer, MobileDevice, and User searchs
  ###
  ### Subclasses must define:
  ### * the constant RESULT_CLASS which is the JSS Module class of 
  ###   the item returned by the search, e.g. JSS::Computer
  ### * the constant REPORT_CLASS, which is the JSS module class of
  ###   the API report that corresponds to this search and presents the 
  ###   display fields, e.g. JSS::ComputerReport.
  ###   REPORT_CLASS should be nil if the API doesn't offer a matching report.
  ###
  ### See Also JSS::APIObject
  ###
  class AdvancedSearch < JSS::APIObject
    
    #####################################
    ### Mix-Ins
    #####################################
    include JSS::Creatable
    include JSS::Updatable
    include JSS::Criteriable
    
    #####################################
    ### Class Constants
    #####################################
    
    #####################################
    ### Attributes
    #####################################
    
    ### :id, :name, :in_jss, :need_to_update, and :rest_rsrc come from JSS::APIObject
    
    ### the sort order
    attr_reader :sort_1, :sort_2, :sort_3
    
    ### the SQL query generated by the JSS based on the critera
    attr_reader :sql_text
    
    ### An Array of Hashes with :id and :name for all
    ### items found by this search
    attr_reader :search_results
    
    ### A hash with the name and id of the site for this search
    attr_reader :site
    
    ### an Array - the Fields to be displayed in the
    ### WebApp when viewing the search results
    ###
    ### NOTE: The API delivers these as an array of Hashes,
    ### where each hash has only one key, :name => the name of the fields/ExtAttrib
    ### to display. It should probably not have the underlying Hashes, and just
    ### be an array of names. This class converts it to such an array for
    ### internal use.
    ###
    ### Note2: To see these fields via the API
    ### use a xxReports object with the same :name or :id
    attr_reader :display_fields
    
    ### String - the format to display the results in the WebApp 
    attr_reader :view_as
    
    #####################################
    ### Constructor 
    #####################################
    
    ###
    ### @param (see APIObject#initialize)
    ###
    def initialize(args = {})
    
      super args
      
      ### @init_data now has the raw data
      ### so fill in our attributes or set defaults
      
      @sort_1 = @init_data[:sort_1]
      @sort_2 = @init_data[:sort_2]
      @sort_3 = @init_data[:sort_3]
      @sql_text = @init_data[:sql_text]
      @site = @init_data[:site] || JSS::NO_SITE
      
      @search_results =  @init_data[self.class::RESULT_CLASS::RSRC_LIST_KEY]
      
      parse_criteria
      
      @display_fields = @init_data[:display_fields] ? @init_data[:display_fields].map{|f| f[:name]} : []
      
    end # init
    
    #####################################
    ### Public Instance Methods 
    #####################################
    
    ###
    ### After creation, we should requery for our computers
    ###
    def create
      raise JSS::InvalidDataError, "JSS::Criteriable::Criteria instance required" unless @criteria.kind_of? JSS::Criteriable::Criteria
      raise JSS::InvalidDataError, "display_fields must be an Array." unless @display_fields.kind_of? Array
      raise JSS::MissingDataError, "display_fields can't be empty" if @display_fields.empty?
      super
      @search_results = self.class.new(:id => @id).search_results
      @id # remember to return the id
    end
    
    ###
    ### Set the list of fields to be displayed in the WebApp
    ### or in the corresponing ComputerReport.
    ### Arg must be an Array of Strings
    ###
    def display_fields= (new_val)
      raise JSS::InvalidDataError, "display_fields must be an Array." unless new_val.kind_of? Array
      raise JSS::MissingDataError, "display_fields can't be empty" if new_val.empty?
      @display_fields = new_val
    end
    
    ###
    ### Return an Array of Hashes that are the results of this search with the display_field data.
    ### The hash keys are symbolized versions of the items in @display_fields
    ###
    def report
      raise JSS::UnsupportedError, "Reports aren't supported for these searches via the API." unless self.class::REPORT_CLASS
      raise JSS::NoSuchItemError, "Not In JSS! Use #create to create this #{RSRC_OBJECT_KEY} in the JSS before getting its report." unless @in_jss
      self.class::REPORT_CLASS.new(:id => @id).report_data
    end
    
    ###
    ### how many items does this seach find?
    ###
    def count
      @search_results.count
    end
    
    
    #####################################
    ### Private Instance Methods
    #####################################    
    private
    
    def rest_xml
      doc = REXML::Document.new APIConnection::XML_HEADER
      acs = doc.add_element self.class::RSRC_OBJECT_KEY.to_s
      acs.add_element('name').text = @name
      acs.add_element('sort_1').text = @sort_1 if @sort_1
      acs.add_element('sort_2').text = @sort_2 if @sort_2
      acs.add_element('sort_3').text = @sort_3 if @sort_3
      
      acs << @criteria.rest_xml 
      
      df = acs.add_element('display_fields')
      @display_fields.each{|f| df.add_element('display_field').add_element('name').text = f }
  
      return doc.to_s
    end # rest xml
    
  end # class AdvancedSearch
  
end # module JSS

require "jss/api_object/advanced_search/advanced_computer_search"
require "jss/api_object/advanced_search/advanced_mobile_device_search"
require "jss/api_object/advanced_search/advanced_user_search"

